type: edu
custom_name: stage4
files:
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;
    import org.junit.BeforeClass;

    import java.io.File;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.sql.*;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final String databaseFileName = "card.s3db";
        private static final String tempDatabaseFileName = "tempDatabase.s3db";
        private static final String[] args = {"-fileName", databaseFileName};
        private static final Map<String, String> correctData = new HashMap<>();

        private static final Pattern cardNumberPattern = Pattern.compile("^400000\\d{10}$", Pattern.MULTILINE);
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        private static Connection connection;


        @DynamicTest
        CheckResult test1_checkDatabaseFile() {
            try {
                Files.deleteIfExists(Paths.get(tempDatabaseFileName));
                Files.deleteIfExists(Paths.get(databaseFileName));
            } catch (Exception ignored) {
            }

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("You should create a database file " +
                    "named " + databaseFileName + ". The file name should be taken from the command line arguments.\n" +
                    "The database file shouldn't be deleted after stopping the program!");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test2_checkConnection() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            getConnection();
            closeConnection();

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test3_checkIfTableExists() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery(
                    "SELECT name FROM sqlite_master WHERE type ='table' AND name NOT LIKE 'sqlite_%';");
                while (resultSet.next()) {
                    if (resultSet.getString("name").equals("card")) {
                        closeConnection();
                        return CheckResult.correct();
                    }
                }
            } catch (SQLException e) {
                closeConnection();
                return CheckResult.wrong("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }

            closeConnection();
            return CheckResult.wrong("Your database doesn't have a table named 'card'");
        }

        @DynamicTest
        CheckResult test4_checkColumns() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("PRAGMA table_info(card);");
                Map<String, String> columns = new HashMap<>();

                while (resultSet.next()) {
                    columns.put(resultSet.getString("name").toLowerCase(), resultSet.getString("type").toUpperCase());
                }

                String[][] correctColumns = {
                    {"id", "INTEGER", "INT"},
                    {"number", "TEXT", "VARCHAR"},
                    {"pin", "TEXT", "VARCHAR"},
                    {"balance", "INTEGER", "INT"}};

                for (String[] correctColumn : correctColumns) {
                    String errorMessage = "Can't find '" + correctColumn[0] + "' column with '" + correctColumn[1] + "' type.\n" +
                        "Your table should have columns described in " +
                        "the stage instructions.";
                    if (!columns.containsKey(correctColumn[0])) {
                        return CheckResult.wrong(errorMessage);
                    } else if (!columns.get(correctColumn[0]).contains(correctColumn[1]) && !columns.get(correctColumn[0]).contains(correctColumn[2])) {
                        return CheckResult.wrong(errorMessage);
                    }
                }
            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect to the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }


        @DynamicTest
        CheckResult test5_checkAddingRowsToTheTable() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM card");
                Map<String, String> userData = new HashMap<>();

                while (resultSet.next()) {
                    System.out.println(resultSet.getString("number"));
                    if (resultSet.getString("number") == null) {
                        return CheckResult.wrong("The card number shouldn't be null in the database!");
                    }
                    if (resultSet.getInt("balance") != 0) {
                        return CheckResult.wrong("Default balance value should be 0 in the database!");
                    }
                    if (resultSet.getString("pin") == null) {
                        return CheckResult.wrong("The PIN shouldn't be null in the database!");
                    }
                    userData.put(resultSet.getString("number"), resultSet.getString("pin"));
                }

                for (Map.Entry<String, String> entry : correctData.entrySet()) {
                    if (!userData.containsKey(entry.getKey())) {
                        return CheckResult.wrong("Your database doesn't save newly created cards.");
                    } else if (!userData.get(entry.getKey()).equals(entry.getValue())) {
                        return CheckResult.wrong("Correct PIN for card number " + entry.getKey() + " should " +
                            "be " + entry.getValue());
                    }
                }


            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test6_checkLogIn() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example:" +
                    " 400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is a digit.");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should be signed in after" +
                    " entering the correct card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test7_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test8_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test9_checkBalance() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);

            output = program.execute("1");

            if (!output.contains("0")) {
                return CheckResult.wrong("Expected balance: 0");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest10_checkAddIncome() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n10000");
            stopAndCheckIfUserProgramWasStopped(program);

            int userBalance = getBalance(correctCardNumber);
            if (userBalance != 10000) {
                return CheckResult.wrong("Account balance int the database is wrong after adding income.\nExpected 10000");
            }

            program = new TestedProgram();
            program.start(args);

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n15000");
            stopAndCheckIfUserProgramWasStopped(program);

            userBalance = getBalance(correctCardNumber);
            if (userBalance != 25000) {
                return CheckResult.wrong("Account balance is wrong after adding income.\nExpected 25000");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest11_checkTransfer() {

            String incorrectCardNumber = "2000007269641764"; //Doesn't pass Luhn algorithm
            String notExistingCardNumber = "2000007269641768";

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "Your program outputs card number " +
                    "wrong.\nCard number should look like 400000DDDDDDDDDD. Where D is some digit");
            }

            String toTransferCardNumber = cardNumberMatcher.group();

            output = program.execute("1");

            cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("3\n" + incorrectCardNumber);

            if (!output.contains("mistake")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that doesn't pass the Luhn algorithm.\n You should print " +
                    "'Probably you made mistake in the card number. Please try again!'");
            }

            output = program.execute("3\n" + notExistingCardNumber);

            if (!output.contains("exist")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that does not exist.\nYou should print " +
                    "'Such a card does not exist.'");
            }

            output = program.execute("3\n" + toTransferCardNumber + "\n100000");
            if (!output.toLowerCase().contains("not enough money")) {
                return new CheckResult(false, "You should not allow a transfer if " +
                    "there is not enough money in the account to complete it. You should print " +
                    "'Not enough money!'");
            }

            program.execute("2\n20000\n3\n" + toTransferCardNumber + "\n10000");

            stopAndCheckIfUserProgramWasStopped(program);

            int correctBalanceForBothAccounts = 10000;
            int toTransferCardBalance = getBalance(toTransferCardNumber);
            int correctCardNumberBalance = getBalance(correctCardNumber);

            if (toTransferCardBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card to which the transfer was made.");
            }

            if (correctCardNumberBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card used to make the transfer.");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest12_checkTransfer() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2\n" + correctCardNumber + "\n" + correctPin + "\n4");

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                PreparedStatement statement = getConnection().prepareStatement("SELECT * FROM card where number = ?");
                statement.setString(1, correctCardNumber);
                ResultSet resultSet = statement.executeQuery();
                if (resultSet.next()) {
                    return new CheckResult(false, "After closing the account, the card should be deleted " +
                        "from the database.");
                }
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        private static Connection getConnection() {
            if (connection == null) {
                try {
                    connection = DriverManager.getConnection("jdbc:sqlite:" + databaseFileName);
                } catch (SQLException exception) {
                    throw new WrongAnswer("Can't connect to the database! Make sure you close your database" +
                        " connection at the end of the program!");
                }
            }
            return connection;
        }

        private static void closeConnection() {
            if (connection == null)
                return;
            try {
                connection.close();
            } catch (SQLException ignored) {
            }
            connection = null;
        }

        //@BeforeClass
        public static void createTempDatabase() {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!userDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(tempDbFile);
                Files.copy(userDbFile, tempDbFile);
            } catch (Exception ignored) {
            }
        }

        //@AfterClass
        public static void deleteTempDatabase() {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!tempDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(userDbFile);
                Files.move(tempDbFile, userDbFile);
            } catch (Exception ignored) {
            }
        }

        private boolean getData(String out) {

            Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
            Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

            Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
            Matcher pinMatcher = pinPattern.matcher(out);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return false;
            }

            String number = cardNumberMatcher.group();
            String PIN = pinMatcher.group();

            if (!checkLuhnAlgorithm(number)) {
                return false;
            }

            correctData.put(number, PIN);

            return true;
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }

        private void deleteAllRows() {
            try {
                getConnection().createStatement().execute("DELETE FROM card");
                closeConnection();
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }
        }

        private void stopAndCheckIfUserProgramWasStopped(TestedProgram program) {
            program.execute("0");
            if (!program.isFinished()) {
                throw new WrongAnswer("After choosing 'Exit' item you should stop your program" +
                    " and close database connection!");
            }
        }

        private static int getBalance(String cardNumber) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM card WHERE number = ?");
                preparedStatement.setString(1, cardNumber);
                ResultSet resultSet = preparedStatement.executeQuery();
                resultSet.next();
                int result = resultSet.getInt("balance");
                closeConnection();
                return result;
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }
        }
    }
  learner_created: false
- name: src/banking/DbConnection.class
  visible: true
  text: yv66vgAAADwAUwoAAgADBwAEDAAFAAYBABBqYXZhL2xhbmcvT2JqZWN0AQAGPGluaXQ+AQADKClWCAAIAQAPb3JnLnNxbGl0ZS5KREJDCgAKAAsHAAwMAA0ADgEAD2phdmEvbGFuZy9DbGFzcwEAB2Zvck5hbWUBACUoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvQ2xhc3M7CAAQAQATamRiYzpzcWxpdGU6YmFuay5kYgoAEgATBwAUDAAVABYBABZqYXZhL3NxbC9Ecml2ZXJNYW5hZ2VyAQANZ2V0Q29ubmVjdGlvbgEAKShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvc3FsL0Nvbm5lY3Rpb247BwAYAQAgamF2YS9sYW5nL0NsYXNzTm90Rm91bmRFeGNlcHRpb24HABoBABVqYXZhL3NxbC9TUUxFeGNlcHRpb24JABwAHQcAHgwAHwAgAQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwoAIgAjBwAkDAAlACYBABNqYXZhL2xhbmcvRXhjZXB0aW9uAQAIdG9TdHJpbmcBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwoAKAApBwAqDAArACwBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL1N0cmluZzspVgoALgAvBwAwDAAxADIBABRiYW5raW5nL0RiQ29ubmVjdGlvbgEAB2Nvbm5lY3QBABcoKUxqYXZhL3NxbC9Db25uZWN0aW9uOwgANAEAMklOU0VSVCBJTlRPIGNhcmQgKGNhcmQscGluLGJhbGFuY2UpIFZBTFVFUyAoPyw/LD8pCwA2ADcHADgMADkAOgEAE2phdmEvc3FsL0Nvbm5lY3Rpb24BABBwcmVwYXJlU3RhdGVtZW50AQAwKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9zcWwvUHJlcGFyZWRTdGF0ZW1lbnQ7CwA8AD0HAD4MAD8AQAEAGmphdmEvc3FsL1ByZXBhcmVkU3RhdGVtZW50AQAJc2V0U3RyaW5nAQAWKElMamF2YS9sYW5nL1N0cmluZzspVgsAPABCDABDAEQBAAZzZXRJbnQBAAUoSUkpVgsAPABGDABHAEgBAAdleGVjdXRlAQADKClaCgAZACMBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQANU3RhY2tNYXBUYWJsZQEABmluc2VydAEAKChMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL1N0cmluZztJKVYHAFABABBqYXZhL2xhbmcvU3RyaW5nAQAKU291cmNlRmlsZQEACU1haW4uamF2YQAgAC4AAgAAAAAAAwAAAAUABgABAEoAAAAdAAEAAQAAAAUqtwABsQAAAAEASwAAAAYAAQAAALsACQAxADIAAQBKAAAAdAACAAIAAAAeAUsSB7gACVcSD7gAEUunAA5MsgAbK7YAIbYAJyqwAAIAAgAOABEAFwACAA4AEQAZAAIASwAAAB4ABwAAAL0AAgC/AAgAwAAOAMQAEQDCABIAwwAcAMUATAAAABAAAv8AEQABBwA2AAEHACIKAAkATQBOAAEASgAAALUAAwAGAAAASbgALU4BOgQSMzoFLRkFuQA1AgA6BBkEBCq5ADsDABkEBSu5ADsDABkEBhy5AEEDABkEuQBFAQBXpwAQOgWyABsZBbYASbYAJ7EAAQAHADgAOwAZAAIASwAAADIADAAAAMgABADJAAcAywALAMwAFQDOAB4AzwAnANAAMADRADgA1QA7ANMAPQDUAEgA1gBMAAAAGgAC/wA7AAUHAE8HAE8BBwA2BwA8AAEHABkMAAEAUQAAAAIAUg==
  learner_created: true
- name: src/banking/Main.class
  visible: true
  text: yv66vgAAADwBBgoAAgADBwAEDAAFAAYBABBqYXZhL2xhbmcvT2JqZWN0AQAGPGluaXQ+AQADKClWCgAIAAkHAAoMAAsABgEADGJhbmtpbmcvTWFpbgEABG1lbnUHAA0BABNqYXZhL3V0aWwvQXJyYXlMaXN0CgAMAAMHABABABBqYXZhL3V0aWwvUmFuZG9tCgAPAAMDO5rKAAoADwAUDAAVABYBAAduZXh0SW50AQAEKEkpSQUADjX6kxoAABIAAAAaDAAbABwBABdtYWtlQ29uY2F0V2l0aENvbnN0YW50cwEAFShJKUxqYXZhL2xhbmcvU3RyaW5nOwoAHgAfBwAgDAAhACIBABBqYXZhL2xhbmcvU3RyaW5nAQAGbGVuZ3RoAQADKClJCgAeACQMACUAHAEACXN1YnN0cmluZwoAJwAoBwApDAAqACsBAA5qYXZhL2xhbmcvTG9uZwEACHRvU3RyaW5nAQAVKEopTGphdmEvbGFuZy9TdHJpbmc7CAAtAQAACgAeAC8MADAAMQEABXNwbGl0AQAnKExqYXZhL2xhbmcvU3RyaW5nOylbTGphdmEvbGFuZy9TdHJpbmc7CgAzADQHADUMADYANwEAEWphdmEvbGFuZy9JbnRlZ2VyAQAIcGFyc2VJbnQBABUoTGphdmEvbGFuZy9TdHJpbmc7KUkKADMAOQwAOgA7AQAHdmFsdWVPZgEAFihJKUxqYXZhL2xhbmcvSW50ZWdlcjsLAD0APgcAPwwAQABBAQAOamF2YS91dGlsL0xpc3QBAANhZGQBABUoTGphdmEvbGFuZy9PYmplY3Q7KVoLAD0AQwwARAAiAQAEc2l6ZQsAPQBGDABHAEgBAANnZXQBABUoSSlMamF2YS9sYW5nL09iamVjdDsKADMASgwASwAiAQAIaW50VmFsdWUHAE0BABdqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcgoATABPDAAFAFABABUoTGphdmEvbGFuZy9TdHJpbmc7KVYKAEwAHwoATABTDABUAFUBAAxkZWxldGVDaGFyQXQBABwoSSlMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7CgBMAFcMAFgAWQEABmFwcGVuZAEALShMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9TdHJpbmdCdWlsZGVyOwoATABbDAAqAFwBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwkACABeDABfAGABAAl1c2VyTlBhc3MBAA9MamF2YS91dGlsL01hcDsLAGIAYwcAZAwAZQBmAQANamF2YS91dGlsL01hcAEAA3B1dAEAOChMamF2YS9sYW5nL09iamVjdDtMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7CwA9AGgMAGkASAEABnJlbW92ZQsAPQBrDABAAGwBABYoSUxqYXZhL2xhbmcvT2JqZWN0OylWCQBuAG8HAHAMAHEAcgEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsIAHQBABpZb3VyIGNhcmQgaGFzIGJlZW4gY3JlYXRlZAoAdgB3BwB4DAB5AFABABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbggAewEAEVlvdXIgY2FyZCBudW1iZXI6CAB9AQAOWW91ciBjYXJkIFBJTjoKAHYAfwwAeQAGCgCBAIIHAIMMAIQAhQEAFGJhbmtpbmcvRGJDb25uZWN0aW9uAQAGaW5zZXJ0AQAoKExqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvU3RyaW5nO0kpVggAhwEAFDEuIENyZWF0ZSBhbiBhY2NvdW50CACJAQATMi4gTG9nIGludG8gYWNjb3VudAgAiwEABzAuIEV4aXQHAI0BABFqYXZhL3V0aWwvU2Nhbm5lcgkAbgCPDACQAJEBAAJpbgEAFUxqYXZhL2lvL0lucHV0U3RyZWFtOwoAjACTDAAFAJQBABgoTGphdmEvaW8vSW5wdXRTdHJlYW07KVYKAIwAlgwAFQAiCgAIAJgMAJkABgEAD2NyZWF0ZUFuQWNjb3VudAoACACbDACcAAYBAA5sb2dJbnRvQWNjb3VudAgAngEABEJ5ZSEIAKABABdFbnRlciB5b3VyIGNhcmQgbnVtYmVyOgoAjACiDACjAFwBAAhuZXh0TGluZQgApQEAD0VudGVyIHlvdXIgUElOOgsAYgCnDACoAEEBAAtjb250YWluc0tleQsAYgCqDACrAEEBAA1jb250YWluc1ZhbHVlCACtAQAgWW91IGhhdmUgc3VjY2Vzc2Z1bGx5IGxvZ2dlZCBpbiEKAAgArwwAsAAGAQAJbG9naW5NZW51CACyAQAZV3JvbmcgY2FyZCBudW1iZXIgb3IgUElOIQgAtAEACjEuIEJhbGFuY2UIALYBAAoyLiBMb2cgb3V0CAC4AQAKQmFsYW5jZTogMAgAugEAIVlvdSBoYXZlIHN1Y2Nlc3NmdWxseSBsb2dnZWQgb3V0IQoAgQC8DAC9AL4BAAdjb25uZWN0AQAXKClMamF2YS9zcWwvQ29ubmVjdGlvbjsIAMABABpTZWxlY3QgY2FyZCwgcGluIGZyb20gY2FyZAsAwgDDBwDEDADFAMYBABNqYXZhL3NxbC9Db25uZWN0aW9uAQAQcHJlcGFyZVN0YXRlbWVudAEAMChMamF2YS9sYW5nL1N0cmluZzspTGphdmEvc3FsL1ByZXBhcmVkU3RhdGVtZW50OwsAyADJBwDKDADLAMwBABpqYXZhL3NxbC9QcmVwYXJlZFN0YXRlbWVudAEADGV4ZWN1dGVRdWVyeQEAFigpTGphdmEvc3FsL1Jlc3VsdFNldDsLAM4AzwcA0AwA0QDSAQASamF2YS9zcWwvUmVzdWx0U2V0AQAEbmV4dAEAAygpWggA1AEABGNhcmQLAM4A1gwA1wDYAQAJZ2V0U3RyaW5nAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsIANoBAANwaW4LAM4A3AwA3QAGAQAFY2xvc2ULAMgA3AsAwgDcBwDhAQAVamF2YS9zcWwvU1FMRXhjZXB0aW9uCgDgAFsHAOQBABFqYXZhL3V0aWwvSGFzaE1hcAoA4wADAQAJU2lnbmF0dXJlAQA1TGphdmEvdXRpbC9NYXA8TGphdmEvbGFuZy9TdHJpbmc7TGphdmEvbGFuZy9TdHJpbmc7PjsBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAA1TdGFja01hcFRhYmxlBwDuAQATW0xqYXZhL2xhbmcvU3RyaW5nOwcA8AEAAltJAQAIcmVhZERhdGEHAPMBABNqYXZhL2xhbmcvVGhyb3dhYmxlAQAIPGNsaW5pdD4BAApTb3VyY2VGaWxlAQAJTWFpbi5qYXZhAQAQQm9vdHN0cmFwTWV0aG9kcw8GAPkKAPoA+wcA/AwAGwD9AQAkamF2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
  learner_created: true
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: card.s3db
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/93/stages/518/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sun, 17 Apr 2022 08:38:38 UTC
record: -1
